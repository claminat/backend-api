const { moderateImage } = require('../adapters/sightengine.adapter');
const Logger = require('../../../shared/helpers/logger.helper');


/**
 * Ph√¢n t√≠ch k·∫øt qu·∫£ ki·ªÉm duy·ªát nudity ƒë·ªÉ c·∫£nh b√°o m·ª©c ƒë·ªô
 */
function analyzeNudityResult(result) {
  const { nudity } = result;

  if (!nudity) return null;

  let level = 'safe';
  let reason = 'Kh√¥ng c√≥ y·∫øu t·ªë nh·∫°y c·∫£m';

  if (nudity.raw >= 0.9) {
    level = 'danger';
    reason = '·∫¢nh c√≥ ch·ª©a n·ªôi dung nh·∫°y c·∫£m r√µ r√†ng (raw nudity)';
  } else if (nudity.partial >= 0.6) {
    level = 'warning';
    reason = '·∫¢nh c√≥ y·∫øu t·ªë nh·∫°y c·∫£m m·ªôt ph·∫ßn (partial nudity)';
  } else if (nudity.raw >= 0.5 || nudity.partial >= 0.3) {
    level = 'moderate';
    reason = '·∫¢nh c√≥ kh·∫£ nƒÉng ch·ª©a n·ªôi dung nh·∫°y c·∫£m';
  }

  return {
    flagged: level !== 'safe',
    level,
    reason,
  };
}

/**
 * Controller x·ª≠ l√Ω ki·ªÉm duy·ªát URL
 */

exports.moderateByUrl = async (req, res) => {
  try {
    Logger.i(`[SIGHTENGINE_CONTROLLER] üì• Nh·∫≠n y√™u c·∫ßu ki·ªÉm duy·ªát URL: ${req.body.url}`);
    const result = await moderateImage(req.body.url);


    const moderation = analyzeNudityResult(result);


    Logger.i(`‚úÖ Ki·ªÉm duy·ªát th√†nh c√¥ng`, 'SIGHTENGINE_CONTROLLER');
    // res.json({ success: true, data: result });

    return res.json({
      success: true,
      data: result,
      moderation, // th√™m th√¥ng tin c·∫£nh b√°o n·∫øu c√≥
    });
  } catch (error) {
    Logger.e('‚ùå L·ªói t·∫°i moderateByUrl', 'SIGHTENGINE_CONTROLLER', error.message, error.stack);
    res.status(500).json({ success: false, message: error.message });
  }
};
